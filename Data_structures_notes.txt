Data structures:
array[]
    Java - homogenous containers
    Python - heterogenous containers
contiguous data structure - all values are next to each other
or use pointers to access data stored in different places

linked list - self referential object
Linear data structure where each element of the list is contained in a separate object called a node
    a node models 2 pieces of info - an item of the data we want to store and a reference to the next element in the list
    head node - first node
    tail node - last node
Doubly linked list stores reference to the node before and the next node

inserting data is more efficient - only true if inserting at head or tail - called prepend(head) or append(tail)

insert - just need to change references to nodes to insert data - constant time but*
    finding position of where you want to insert is linear time


Merge Sort:
splits arrays in half until all single element arrays, then sorts while merging back doublng each time

Hash Tables: are not ordered
JS: Objects, Python: dictionaries
key: value pairs
Hash tables are built on top of arrays
What makes a good hash functions:
- same input always gives the same output
- fast (constant time)
- minimize collisions

Collision handling - different techniques
linked list 

Big O of operations on Hash Tables: (all T, S O(1) constant time and space)
worst case T O(n), S O(1) - this would be a poor hash function
access - given key, find value
insert - add new key: value pair
delete - remove key: value pair
search for key - T O(1)
search for value - T O(n)
create a new Hash table with n key:value pairs S O(n)